
# Loading the data

```{python}
from openai import OpenAI
from local_settings import OPENAI_KEY # Assumes you have a local_settings.py file in your folder with your OpenAI key  
# Initialize the OpenAI client
client = OpenAI(api_key=OPENAI_KEY) # I need a new API_key
```

```{python}
import pandas as pd
import plotly.express as px

rw_data = pd.read_excel("livestock-detection-counting-and-classification_2025-02-06_10_54_12_export.xlsx", sheet_name="Sheet1", header=0)
```

There are 100 articles in the dataset with 24 columns, for the analysis: columns doi, first_page, last_page, etc can be remove since they do not contain necessary information at this stage

```{python}
clean_data = rw_data.drop(
    columns=[
        "doi",
        "first_page",
        "last_page",
        "conference_series",
        "volume",
        "number",
        "journal",
        "url",
    ]
)

yearVcount = clean_data.groupby(["year", 'publication_type']).count()["abstract"]

px.line(
    clean_data.groupby("year").count()["abstract"],
    title="Abstracts trends from 1994 on Livestock Detection",
    labels={"abstract": "Abstract Count", "year": "Year"},
)

yearVcount = yearVcount.to_frame().reset_index()

px.bar(
    yearVcount,
    x="year",
    y='abstract',
    color='publication_type',
    title="Abstracts trends from 1994 on Livestock Detection",
    labels={"abstract": "Abstract Count", "year": "Year", 'publication_type': 'Type'},
    # nbins=40, 
   
)

clean_data['year'].sort_values(ascending=False).head(20)


def llm_chat(message):
    response = client.chat.completions.create(
        model="gpt-4o-mini", messages=[{"role": "user", "content": message}]
    )
    return response.choices[0].message.content


# Test the function here
llm_chat("What is Python (the language) named after?")
```

```{python}
# import pandas as pd
import matplotlib.pyplot as plt

# Load the data
file_path = (
    "livestock-detection-counting-and-classification_2025-02-06_10_54_12_export.xlsx"
)
df = pd.read_excel(file_path, sheet_name="Sheet1")

# Convert 'year' column to numeric
if "year" in df.columns:
    df["year"] = pd.to_numeric(df["year"], errors="coerce")

# Plot Abstract Counts vs. Year
abstract_counts = df.groupby("year").size()
plt.figure(figsize=(10, 5))
plt.bar(abstract_counts.index, abstract_counts.values, color="skyblue")
plt.xlabel("Year")
plt.ylabel("Number of Abstracts")
plt.title("Abstract Counts per Year")
plt.xticks(rotation=45)
plt.show()

# Slice Data for Repeated Authors
if "authors" in df.columns:
    authors_series = (
        df["authors"].dropna().str.split(";")
    )  # Assuming authors are separated by ';'
    authors_flat = [author.strip() for authors in authors_series for author in authors]
    author_counts = pd.Series(authors_flat).value_counts()
    repeated_authors = author_counts[author_counts > 1].index.tolist()
    repeated_authors_df = df[
        df["authors"].str.contains("|".join(repeated_authors), na=False)
    ]
    print("Repeated Authors Data:")
    print(repeated_authors_df[["title", "authors"]])

# Slice Data for Latest Patents
if "publication_type" in df.columns and "year" in df.columns:
    patents_df = df[df["publication_type"].str.contains("patent", case=False, na=False)]
    latest_patents_df = patents_df.sort_values(by="year", ascending=False)
    print("Latest Patents Data:")
    print(latest_patents_df[["title", "year", "authors"]].head())
```
